# Yukta Batra
# G01489018


# -*- coding: utf-8 -*-
"""P3_ybatra.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12Kl5NgkOmtDx-az49JO5XOTEw3-02qbk
"""

## Importing Libraries
"""

# Importing necessary libraries"""
import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.metrics import accuracy_score

"""## Data Exploration and Understanding"""

# Defining column names for the dataset
column_names = ['Type','Alcohol','MalicAcid','Ash','Alcalinity','Magnesium','Phenols','Flavanoids','Nonflavanoid','Proanthocyanins','ColorIntensity','Hue','DilutedWines','Proline']

# Reading the dataset
data = pd.read_csv("wines.csv", skiprows=1, header=None, names=column_names)
print(data.head(10))  # Printing first 10 rows of the dataset
print(data.describe())  # Summary statistics of the dataset
print(data.info())  # Information about the dataset

"""## Feature Engineering"""

# Visualizing distribution of wine types
plt.figure(figsize=(8, 6))
sns.countplot(x='Type', data=data)
plt.xlabel('Wine Type')
plt.ylabel('Count')
plt.title('Distribution of Wine Types')
print(plt.show())

"""#### Node class"""

# Defining a class for nodes in the decision tree
class Node():
    def __init__(self, feature_index=None, threshold=None, left=None, right=None, info_gain=None, value=None):
        self.feature_index = feature_index
        self.threshold = threshold
        self.left = left
        self.right = right
        self.info_gain = info_gain
        self.value = value

"""#### Tree class"""

# Defining a class for the decision tree classifier
class DecisionTreeClassifier():
    def __init__(self, min_samples_split, max_depth):
        self.root = None
        self.min_samples_split = min_samples_split
        self.max_depth = max_depth

    # Function to build the decision tree
    def build_tree(self, dataset, curr_depth=0):
        X, Y = dataset[:,:-1], dataset[:,-1]
        num_samples, num_features = np.shape(X)
        if num_samples>=self.min_samples_split and curr_depth<=self.max_depth:
            best_split = self.get_best_split(dataset, num_samples, num_features)
            if best_split["info_gain"]>0:
                left_subtree = self.build_tree(best_split["dataset_left"], curr_depth+1)
                right_subtree = self.build_tree(best_split["dataset_right"], curr_depth+1)
                return Node(best_split["feature_index"], best_split["threshold"],
                            left_subtree, right_subtree, best_split["info_gain"])
        leaf_value = self.calculate_leaf_value(Y)
        return Node(value=leaf_value)

    # Function to find the best split for a node
    def get_best_split(self, dataset, num_samples, num_features):
        best_split = {}
        max_info_gain = -float("inf")
        for feature_index in range(num_features):
            feature_values = dataset[:, feature_index]
            possible_thresholds = np.unique(feature_values)
            for threshold in possible_thresholds:
                dataset_left, dataset_right = self.split(dataset, feature_index, threshold)
                if len(dataset_left)>0 and len(dataset_right)>0:
                    y, left_y, right_y = dataset[:, -1], dataset_left[:, -1], dataset_right[:, -1]
                    curr_info_gain = self.information_gain(y, left_y, right_y, "gini")
                    if curr_info_gain>max_info_gain:
                        best_split["feature_index"] = feature_index
                        best_split["threshold"] = threshold
                        best_split["dataset_left"] = dataset_left
                        best_split["dataset_right"] = dataset_right
                        best_split["info_gain"] = curr_info_gain
                        max_info_gain = curr_info_gain
        return best_split

    # Function to split the dataset based on a threshold
    def split(self, dataset, feature_index, threshold):
        dataset_left = np.array([row for row in dataset if row[feature_index]<=threshold])
        dataset_right = np.array([row for row in dataset if row[feature_index]>threshold])
        return dataset_left, dataset_right

    # Function to calculate information gain
    def information_gain(self, parent, l_child, r_child, mode="entropy"):
        weight_l = len(l_child) / len(parent)
        weight_r = len(r_child) / len(parent)
        if mode=="gini":
            gain = self.gini_index(parent) - (weight_l*self.gini_index(l_child) + weight_r*self.gini_index(r_child))
        else:
            gain = self.entropy(parent) - (weight_l*self.entropy(l_child) + weight_r*self.entropy(r_child))
        return gain

    # Function to calculate entropy
    def entropy(self, y):
        class_labels = np.unique(y)
        entropy = 0
        for cls in class_labels:
            p_cls = len(y[y == cls]) / len(y)
            entropy += -p_cls * np.log2(p_cls)
        return entropy

    # Function to calculate Gini index
    def gini_index(self, y):
        class_labels = np.unique(y)
        gini = 0
        for cls in class_labels:
            p_cls = len(y[y == cls]) / len(y)
            gini += p_cls**2
        return 1 - gini

    # Function to calculate leaf value
    def calculate_leaf_value(self, Y):
        Y = list(Y)
        return max(Y, key=Y.count)

    # Function to print the decision tree
    def print_tree(self, tree=None, indent=" "):
        if not tree:
            tree = self.root
        if tree.value is not None:
            print(tree.value)
        else:
            print("X_"+str(tree.feature_index), "<=", tree.threshold, "?", tree.info_gain)
            print("%sleft:" % (indent), end="")
            self.print_tree(tree.left, indent + indent)
            print("%sright:" % (indent), end="")
            self.print_tree(tree.right, indent + indent)

    # Function to fit the model
    def fit(self, X, Y):
        dataset = np.concatenate((X, Y), axis=1)
        self.root = self.build_tree(dataset)

    # Function to make predictions
    def predict(self, X):
        predictions = [self.make_prediction(x, self.root) for x in X]
        return predictions

    # Function to make a single prediction
    def make_prediction(self, x, tree):
        if tree.value != None:
            return tree.value
        feature_val = x[tree.feature_index]
        if feature_val <= tree.threshold:
            return self.make_prediction(x, tree.left)
        else:
            return self.make_prediction(x, tree.right)

"""## Data Modeling"""

# Splitting the dataset into features (X) and target variable (Y)
X = data.iloc[:, 1:].values
Y = data.iloc[:, 0].values.reshape(-1,1)

# Splitting the dataset into training and testing sets
from sklearn.model_selection import train_test_split
X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=.301, random_state=41)

# Creating an instance of the DecisionTreeClassifier class
classifier = DecisionTreeClassifier(2,3)
classifier.fit(X_train,Y_train)  # Fitting the model
classifier.print_tree()  # Printing the decision tree

"""## Model Evaluation"""

# Making predictions on the testing set
Y_pred = classifier.predict(X_test)

# Calculating accuracy of the model
Accuracy_number = "{:.2f}".format(accuracy_score(Y_test, Y_pred) * 100)
print(Accuracy_number)

# Printing classification report
from sklearn.metrics import classification_report
print(classification_report(Y_test, Y_pred))

# Function to calculate feature importance based on the frequency of features being chosen
def calculate_feature_importance(tree):
    feature_count = {}
    calculate_feature_count(tree, feature_count)
    total_count = sum(feature_count.values())
    return {feature: count / total_count for feature, count in feature_count.items()}

# Function to calculate frequency of features being chosen
def calculate_feature_count(tree, feature_count):
    if tree.value is None:
        if tree.feature_index not in feature_count:
            feature_count[tree.feature_index] = 1
        else:
            feature_count[tree.feature_index] += 1
        calculate_feature_count(tree.left, feature_count)
        calculate_feature_count(tree.right, feature_count)

# Calculating feature importance
feature_importance = calculate_feature_importance(classifier.root)

# Plotting feature importance
plt.figure(figsize=(10, 6))
plt.barh(data.columns[1:], [feature_importance.get(i, 0) for i in range(len(data.columns) - 1)])
plt.xlabel('Attribute Importance')
plt.ylabel('Attributes')
plt.title('Feature Importance for testing the model')
plt.show()